From 688694bdb285bac3e2fd5e48715550bf1159eadf Mon Sep 17 00:00:00 2001
From: Andrew Comminos <andrew@comminos.com>
Date: Thu, 15 Mar 2018 21:07:21 -0700
Subject: [PATCH 08/11] wined3d: Add DISABLE_PBA envvar, some PBA cleanup.

Signed-off-by: Rob Walker <bob.mt.wya@gmail.com>
---
 dlls/wined3d/buffer.c          |  4 ++--
 dlls/wined3d/buffer_heap.c     | 34 +++++++++++++++++++++++-------
 dlls/wined3d/device.c          | 38 +++++++++++++++++++++++-----------
 dlls/wined3d/query.c           |  2 +-
 dlls/wined3d/wined3d_private.h |  6 ++----
 5 files changed, 57 insertions(+), 27 deletions(-)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 5e3df085a19..f60318e5019 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -1616,5 +1616,5 @@ static HRESULT wined3d_buffer_init(struct wined3d_buffer *buffer, struct wined3d
     {
-        if (!gl_info->supported[ARB_BUFFER_STORAGE])
+        if (!device->use_pba)
         {
-            WARN_(d3d_perf)("Not creating a persistent mapping for a dynamic buffer because ARB_buffer_storage is unsupported.\n");
+            WARN_(d3d_perf)("Not creating a persistent mapping for dynamic buffer %p because the PBA is disabled.\n", buffer);
         }
diff --git a/dlls/wined3d/buffer_heap.c b/dlls/wined3d/buffer_heap.c
index 80670c515f7..899aad96126 100644
--- a/dlls/wined3d/buffer_heap.c
+++ b/dlls/wined3d/buffer_heap.c
@@ -27,2 +27,5 @@ WINE_DECLARE_DEBUG_CHANNEL(d3d_perf);
 
+// Arbitrary binding to use when binding the persistent buffer.
+#define BIND_TARGET GL_ARRAY_BUFFER
+
 struct wined3d_buffer_heap_fenced_element
@@ -142,3 +145,2 @@ HRESULT wined3d_buffer_heap_create(struct wined3d_context *context, GLsizeiptr s
     const struct wined3d_gl_info *gl_info = context->gl_info;
-    const GLenum buffer_target = GL_ARRAY_BUFFER;
     GLbitfield access_flags;
@@ -164,13 +166,14 @@ HRESULT wined3d_buffer_heap_create(struct wined3d_context *context, GLsizeiptr s
     }
+
     storage_flags = GL_CLIENT_STORAGE_BIT | access_flags;
 
-    // TODO(acomminos): where should we be checking for errors here?
     GL_EXTCALL(glGenBuffers(1, &object->buffer_object));
+    checkGLcall("glGenBuffers");
 
-    context_bind_bo(context, buffer_target, object->buffer_object);
+    context_bind_bo(context, BIND_TARGET, object->buffer_object);
 
-    // TODO(acomminos): assert glBufferStorage supported?
-    GL_EXTCALL(glBufferStorage(buffer_target, size, NULL, storage_flags));
+    GL_EXTCALL(glBufferStorage(BIND_TARGET, size, NULL, storage_flags));
+    checkGLcall("glBufferStorage");
 
-    if (!(object->map_ptr = GL_EXTCALL(glMapBufferRange(buffer_target, 0, size, access_flags))))
+    if (!(object->map_ptr = GL_EXTCALL(glMapBufferRange(BIND_TARGET, 0, size, access_flags))))
     {
@@ -179,3 +182,3 @@ HRESULT wined3d_buffer_heap_create(struct wined3d_context *context, GLsizeiptr s
     }
-    context_bind_bo(context, buffer_target, 0);
+    context_bind_bo(context, BIND_TARGET, 0);
 
@@ -197,3 +200,18 @@ HRESULT wined3d_buffer_heap_destroy(struct wined3d_buffer_heap *heap, struct win
 {
-    FIXME("Unimplemented, leaking buffer");
+    const struct wined3d_gl_info *gl_info = context->gl_info;
+
+    context_bind_bo(context, BIND_TARGET, heap->buffer_object);
+    GL_EXTCALL(glUnmapBuffer(BIND_TARGET));
+    checkGLcall("glUnmapBuffer");
+    context_bind_bo(context, BIND_TARGET, 0);
+
+    GL_EXTCALL(glDeleteBuffers(1, &heap->buffer_object));
+    checkGLcall("glDeleteBuffers");
+
+    DeleteCriticalSection(&heap->temp_lock);
+
+    // TODO(acomminos): cleanup free lists, fenced list, etc.
+
+    HeapFree(GetProcessHeap(), 0, heap);
+
     return WINED3D_OK;
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 302f4868ca8..fcce1bdb450 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -845,12 +845,23 @@ static void create_buffer_heap(struct wined3d_device *device, struct wined3d_con
     const struct wined3d_gl_info *gl_info = &device->adapter->gl_info;
-    // TODO(acomminos): kill this magic number. perhaps base on vram.
-    GLsizeiptr geo_heap_size = 512 * 1024 * 1024;
-    // We choose a constant buffer size of 128MB, the same as NVIDIA claims to
-    // use in their Direct3D driver for discarded constant buffers.
-    GLsizeiptr cb_heap_size = 128 * 1024 * 1024;
-    GLint ub_alignment;
-    HRESULT hr;
+    BOOL use_pba = FALSE;
+    char *env_pba_disable;
 
-    if (gl_info->supported[ARB_BUFFER_STORAGE])
+    if (!gl_info->supported[ARB_BUFFER_STORAGE])
+    {
+        FIXME("Not using PBA, ARB_buffer_storage unsupported.\n");
+    }
+    else if ((env_pba_disable = getenv("PBA_DISABLE")) && *env_pba_disable != '0')
     {
+        FIXME("Not using PBA, envvar 'PBA_DISABLE' set.\n");
+    }
+    else
+    {
+        // TODO(acomminos): kill this magic number. perhaps base on vram.
+        GLsizeiptr geo_heap_size = 512 * 1024 * 1024;
+        // We choose a constant buffer size of 128MB, the same as NVIDIA claims to
+        // use in their Direct3D driver for discarded constant buffers.
+        GLsizeiptr cb_heap_size = 128 * 1024 * 1024;
+        GLint ub_alignment;
+        HRESULT hr;
+
         gl_info->gl_ops.gl.p_glGetIntegerv(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, &ub_alignment);
@@ -863,2 +874,3 @@ static void create_buffer_heap(struct wined3d_device *device, struct wined3d_con
             ERR("Failed to create write-only persistent buffer heap, hr %#x.\n", hr);
+            goto fail;
         }
@@ -868,2 +880,3 @@ static void create_buffer_heap(struct wined3d_device *device, struct wined3d_con
             ERR("Failed to create persistent buffer heap for constant buffers, hr %#x.\n", hr);
+            goto fail;
         }
@@ -871,7 +884,8 @@ static void create_buffer_heap(struct wined3d_device *device, struct wined3d_con
         FIXME("Initialized PBA (geo_heap_size: %ld, cb_heap_size: %ld, ub_align: %d)\n", geo_heap_size, cb_heap_size, ub_alignment);
+
+        use_pba = TRUE;
     }
-    else
-    {
-        FIXME("Not using PBA, ARB_buffer_storage unsupported.\n");
-    }
+
+fail:
+    device->use_pba = use_pba;
 }
diff --git a/dlls/wined3d/query.c b/dlls/wined3d/query.c
index cefdedee4f1..4239fc08b3d 100644
--- a/dlls/wined3d/query.c
+++ b/dlls/wined3d/query.c
@@ -181,3 +181,3 @@ static BOOL wined3d_fence_supported(const struct wined3d_gl_info *gl_info)
 
-enum wined3d_fence_result wined3d_fence_test(const struct wined3d_fence *fence,
+static enum wined3d_fence_result wined3d_fence_test(const struct wined3d_fence *fence,
         const struct wined3d_device *device, DWORD flags)
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 9eec2ed94e4..a30c83a6986 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -1710,5 +1710,2 @@ enum wined3d_fence_result wined3d_fence_wait(const struct wined3d_fence *fence,
         const struct wined3d_device *device) DECLSPEC_HIDDEN;
-// XXX(acomminos): really expose this?
-enum wined3d_fence_result wined3d_fence_test(const struct wined3d_fence *fence,
-        const struct wined3d_device *device, DWORD flags) DECLSPEC_HIDDEN;
 
@@ -2994,3 +2991,4 @@ struct wined3d_device
     BYTE filter_messages : 1;
-    BYTE padding : 3;
+    BYTE use_pba : 1;                   /* A flag to use the persistent buffer allocator for dynamic buffers. */
+    BYTE padding : 2;
 
-- 
2.19.1

