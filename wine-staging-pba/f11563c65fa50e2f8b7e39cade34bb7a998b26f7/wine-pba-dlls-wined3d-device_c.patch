diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index f221262a070..514c4e50913 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -35,6 +35,7 @@
 #include "wined3d_private.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(d3d);
+WINE_DECLARE_DEBUG_CHANNEL(d3d_perf);
 WINE_DECLARE_DEBUG_CHANNEL(winediag);
 
 /* Define the default light parameters as specified by MSDN. */
@@ -837,6 +838,111 @@ static void destroy_default_samplers(struct wined3d_device *device, struct wined
     device->null_sampler = NULL;
 }
 
+/* Context activation is done by the caller. */
+static void create_buffer_heap(struct wined3d_device *device, struct wined3d_context *context)
+{
+    const char *env_pba_cb_heap = getenv("__PBA_CB_HEAP");
+    const char *env_pba_geo_heap = getenv("__PBA_GEO_HEAP");
+    const struct wined3d_gl_info *gl_info = &device->adapter->gl_info;
+    const struct wined3d_d3d_info *d3d_info = &device->adapter->d3d_info;
+    BOOL use_pba = FALSE;
+    char *env_pba_enable;
+    GLsizeiptr cb_heap_size, geo_heap_size;
+    GLint ub_alignment;
+    HRESULT hr;
+    unsigned int cb_heap, cb_heap_default, geo_heap, geo_heap_default, vram_mb;
+
+    if (!gl_info->supported[ARB_BUFFER_STORAGE])
+    {
+        FIXME_(d3d_perf)("Not using PBA, ARB_buffer_storage unsupported.\n");
+    }
+    else if ((env_pba_enable = getenv("PBA_ENABLE")) && *env_pba_enable != '0')
+    {
+        vram_mb = device->adapter->vram_bytes / (1024 * 1024);
+        geo_heap_default = vram_mb - (vram_mb>>2);
+        geo_heap = ( env_pba_geo_heap ? atoi(env_pba_geo_heap) : geo_heap_default );
+        /* We choose a constant buffer size of 128MB, the same as NVIDIA claims to
+           use in their Direct3D driver for discarded constant buffers. */
+        cb_heap_default = (d3d_info->feature_level >= WINED3D_FEATURE_LEVEL_10) ? 128 : 0;
+        cb_heap = ( env_pba_cb_heap ? atoi(env_pba_cb_heap) : cb_heap_default );
+
+        if (env_pba_geo_heap)
+            FIXME_(d3d_perf)("geo_heap_size set by envvar __PBA_GEO_HEAP=%s Mb\n", env_pba_geo_heap);
+        else
+            FIXME_(d3d_perf)("geo_heap_size set automatically to: %d Mb\n", geo_heap);
+
+        if (env_pba_cb_heap)
+            FIXME_(d3d_perf)("cb_heap_size set by envvar __PBA_CB_HEAP=%s\n", env_pba_cb_heap);
+        else
+            FIXME_(d3d_perf)("cb_heap_size set automatically to: %d Mb\n", cb_heap);
+
+        if (( geo_heap + cb_heap > vram_mb ) || ( geo_heap <= 0 ))
+        {
+            if ( geo_heap <= 0 )
+            {
+                FIXME_(d3d_perf)("geo_heap (%d Mb) is set to low. Fallback to the PBA geo_heap default\n", geo_heap);
+            }
+            else
+            {
+                FIXME_(d3d_perf)("geo_heap (%d Mb) plus cb_heap (%d Mb) exceeds VRAM: %d Mb. Fallback to PBA geo_heap + cb_heap defaults\n", geo_heap, cb_heap, vram_mb);
+                cb_heap = (vram_mb < 128) ? 0 : ((vram_mb < 768) ? cb_heap_default>>2 : cb_heap_default);
+            }
+            geo_heap = geo_heap_default;
+        }
+
+        geo_heap_size = geo_heap * 1024 * 1024;
+        cb_heap_size = cb_heap * 1024 * 1024;
+
+        gl_info->gl_ops.gl.p_glGetIntegerv(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, &ub_alignment);
+
+        /* Align constant buffer heap size, in case GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT isn't a power of two (for some reason). */
+        cb_heap_size -= cb_heap_size % ub_alignment;
+
+        /* Try smaller geo_heap_size (* 3/4) till heap allocation succeeds or we are trying to allocate a zero-sized buffer */
+        while (FAILED(hr = wined3d_buffer_heap_create(context, geo_heap_size, 0, TRUE, &device->wo_buffer_heap)) && geo_heap_size)
+        {
+            geo_heap_size = geo_heap_size - (geo_heap_size>>2);
+            ERR("Automatically descreasing geo_heap_size to: %ld, due to heap creation failure.\n", geo_heap_size);
+        }
+        if (FAILED(hr))
+        {
+            ERR("Failed to create write-only persistent buffer heap, hr %#x.\n", hr);
+            goto fail;
+        }
+
+        if (!cb_heap)
+        {
+            if (cb_heap_default)
+                FIXME_(d3d_perf)("cb_heap set to 0 Mb. This will degrade performance with DirectX 10/11\n");
+        }
+        else if (FAILED(hr = wined3d_buffer_heap_create(context, cb_heap_size, ub_alignment, TRUE, &device->cb_buffer_heap)))
+        {
+            ERR("Failed to create persistent buffer heap for constant buffers, hr %#x. This will degrade performance with DirectX 10/11\n", hr);
+        }
+
+        FIXME("Initialized PBA (geo_heap_size: %ld, cb_heap_size: %ld, ub_align: %d)\n", geo_heap_size, cb_heap_size, ub_alignment);
+
+        use_pba = TRUE;
+    }
+    else
+    {
+        FIXME("Not using PBA, envvar 'PBA_ENABLE' not set.\n");
+    }
+
+fail:
+    device->use_pba = use_pba;
+}
+
+/* Context activation is done by the caller. */
+static void destroy_buffer_heap(struct wined3d_device *device, struct wined3d_context *context)
+{
+    if (device->wo_buffer_heap)
+        wined3d_buffer_heap_destroy(device->wo_buffer_heap, context);
+
+    if (device->cb_buffer_heap)
+        wined3d_buffer_heap_destroy(device->cb_buffer_heap, context);
+}
+
 static LONG fullscreen_style(LONG style)
 {
     /* Make sure the window is managed, otherwise we won't get keyboard input. */
@@ -1001,6 +1107,8 @@ static void wined3d_device_delete_opengl_contexts_cs(void *object)
     device->shader_backend->shader_free_private(device);
     destroy_dummy_textures(device, context);
     destroy_default_samplers(device, context);
+    destroy_buffer_heap(device, context);
+
     context_release(context);
 
     while (device->context_count)
@@ -1050,6 +1158,9 @@ static void wined3d_device_create_primary_opengl_context_cs(void *object)
     context = context_acquire(device, target, 0);
     create_dummy_textures(device, context);
     create_default_samplers(device, context);
+
+    create_buffer_heap(device, context);
+
     context_release(context);
 }
 
